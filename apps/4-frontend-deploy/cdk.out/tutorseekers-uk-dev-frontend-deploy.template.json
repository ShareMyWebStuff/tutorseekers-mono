{
 "Resources": {
  "tutorseekersukdevnextec2roleC0B79471": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ec2.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "tutorseekers-uk-dev-frontend-deploy/tutorseekers-uk-dev-next-ec2-role/Resource"
   }
  },
  "tutorseekersukdevnextec2roleDefaultPolicy544A0A71": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:GetObject",
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "tutorseekersukdevnextec2roleDefaultPolicy544A0A71",
    "Roles": [
     {
      "Ref": "tutorseekersukdevnextec2roleC0B79471"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "tutorseekers-uk-dev-frontend-deploy/tutorseekers-uk-dev-next-ec2-role/DefaultPolicy/Resource"
   }
  },
  "tutorseekersukdevnextstaticip": {
   "Type": "AWS::EC2::EIP",
   "Properties": {
    "Domain": "vpc-021263446d882e99f"
   },
   "Metadata": {
    "aws:cdk:path": "tutorseekers-uk-dev-frontend-deploy/tutorseekers-uk-dev-next-static-ip"
   }
  },
  "tutorseekersukdevnextec2instanceInstanceProfile339C80DD": {
   "Type": "AWS::IAM::InstanceProfile",
   "Properties": {
    "Roles": [
     {
      "Ref": "tutorseekersukdevnextec2roleC0B79471"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "tutorseekers-uk-dev-frontend-deploy/tutorseekers-uk-dev-next-ec2-instance/InstanceProfile"
   }
  },
  "tutorseekersukdevnextec2instanceDB23062D": {
   "Type": "AWS::EC2::Instance",
   "Properties": {
    "AvailabilityZone": "eu-west-2a",
    "IamInstanceProfile": {
     "Ref": "tutorseekersukdevnextec2instanceInstanceProfile339C80DD"
    },
    "ImageId": "ami-0eb260c4d5475b901",
    "InstanceType": "t2.small",
    "KeyName": "TutorSeekers-co-uk-kp",
    "SecurityGroupIds": [
     "sg-0042c42d1bfb49238"
    ],
    "SubnetId": "subnet-02ad95f488790dde5",
    "Tags": [
     {
      "Key": "Name",
      "Value": "tutorseekers-uk-dev-frontend-deploy/tutorseekers-uk-dev-next-ec2-instance"
     }
    ],
    "UserData": {
     "Fn::Base64": {
      "Fn::Join": [
       "",
       [
        "#!/bin/bash\necho \"Starting \" > /home/ubuntu/hello.txt\n\n#\n# Writes logging messages to the log file\n#\nlogging() {\n    echo `date \"+%F %T\"` - $1 >> /home/ubuntu/logs/hello.txt\n}\n\n#\n# Create scripts directory\n#\ncreate_scripts_directory() {\n    mkdir /home/ubuntu/scripts\n    chown ubuntu:ubuntu /home/ubuntu/scripts\n\n    mkdir /home/ubuntu/logs\n    chown ubuntu:ubuntu /home/ubuntu/logs\n}\n\n#\n# Create script to upgrade the server\n#\ncreate_script_to_upgrade_server() {\n\n    upgradeScript=\"/home/ubuntu/scripts/upgrade_server.sh\"\n\n    logging \"Create script to upgrade server\"\n\n    echo \"#!/bin/bash\" > $upgradeScript\n    echo \"\" >> $upgradeScript\n    echo \"logging() {\" >> $upgradeScript\n    echo \"    echo \\`date \\\"+%F %T\\\"\\` - \\$1 >> /home/ubuntu/logs/upgrade_server.txt\" >> $upgradeScript\n    echo \"}\" >> $upgradeScript\n    echo \"\" >> $upgradeScript\n    echo \"logging \\\"Starting update\\\"\" >> $upgradeScript\n    echo \"apt-get update -y\" >>  $upgradeScript\n    echo \"logging \\\"Starting upgrade\\\"\" >> $upgradeScript\n    echo \"apt-get upgrade -y\" >> $upgradeScript\n    echo \"logging \\\"Installing nginx\\\"\" >> $upgradeScript\n    echo \"apt install nginx -y\" >> $upgradeScript\n    echo \"logging \\\"Starting nginx\\\"\" >> $upgradeScript\n    echo \"systemctl start nginx\" >> $upgradeScript\n    echo \"logging \\\"Enable nginx\\\"\" >> $upgradeScript\n    echo \"systemctl enable nginx\" >> $upgradeScript\n    echo \"logging \\\"Upgrade complete\\\"\" >> $upgradeScript\n\n    chown ubuntu:ubuntu $upgradeScript\n    chmod 755 $upgradeScript\n\n    logging \"Completed creating script\"\n}\n\n# \n# Create the nginx config file for the domain. We then run the certbot to create the encryption, this \n# will change the file to add the encryption details.\n#\ncreate_nginx_conf_file() {\n    logging \"Creating nginx conf file\"\n\n    logging \"Create script to upgrade server\"\n\n    nginxConfScript=\"/home/ubuntu/scripts/create_nginx_conf.sh\"\n\n    logging \"Creating nginx conf file1\"\n\n    echo \"#!/bin/bash\" > $nginxConfScript\n    logging \"Creating nginx conf file 2\"\n\n    echo \"\" >> $nginxConfScript\n\n    logging \"Creating nginx conf file 3\"\n\n    echo \"logging() {\" >> $nginxConfScript\n    echo \"    echo \\`date \\\"+%F %T\\\"\\` - \\$1 >> /home/ubuntu/logs/create_nginx_conf.txt\" >> $nginxConfScript\n    echo \"}\" >> $nginxConfScript\n    echo \"\" >> $nginxConfScript\n\n    echo \"#\" >> $nginxConfScript\n    echo \"# Function Name: create_nginx_conf\" >> $nginxConfScript\n    echo \"# \" >> $nginxConfScript\n    echo \"# Description  : This function creates a nginx config file for ach of the specified domain names\" >> $nginxConfScript\n    echo \"# \" >> $nginxConfScript\n    echo \"# Params\" >> $nginxConfScript\n    echo \"#   ip address\" >> $nginxConfScript\n    echo \"#   domain name\" >> $nginxConfScript\n    echo \"# \" >> $nginxConfScript\n    echo \"\" >> $nginxConfScript\n\n    echo \"create_nginx_conf() {\" >> $nginxConfScript\n    echo \"\" >> $nginxConfScript\n    echo \"  nginxFilename=\\\"/etc/nginx/sites-available/\\$2\\\"\" >> $nginxConfScript\n    echo \"  rm /etc/nginx/sites-enabled/\\$2 &>/dev/null\" >> $nginxConfScript\n    echo \"  rm \\$nginxFilename &>/dev/null\" >> $nginxConfScript\n    echo \"\" >> $nginxConfScript\n    echo \"  echo \\\"server {\\\" >> \\$nginxFilename\" >> $nginxConfScript\n    echo \"  echo \\\"  client_max_body_size 64M;\\\" >> \\$nginxFilename\" >> $nginxConfScript\n    echo \"  echo \\\"  listen 80;\\\" >> \\$nginxFilename\" >> $nginxConfScript\n    echo \"  echo \\\"  server_name www.\\$2 \\$2 \\$1;\\\" >> \\$nginxFilename\" >> $nginxConfScript\n    echo \"  echo \\\"\\\" >> \\$nginxFilename\" >> $nginxConfScript\n    echo \"  echo \\\"  location / {\\\" >> \\$nginxFilename\" >> $nginxConfScript\n    echo \"  echo \\\"      proxy_pass             http://127.0.0.1:3000;\\\" >> \\$nginxFilename\" >> $nginxConfScript\n    echo \"  echo \\\"      proxy_read_timeout     60;\\\" >> \\$nginxFilename\" >> $nginxConfScript\n    echo \"  echo \\\"      proxy_connect_timeout  60;\\\" >> \\$nginxFilename\" >> $nginxConfScript\n    echo \"  echo \\\"      proxy_redirect         off;\\\" >> \\$nginxFilename\" >> $nginxConfScript\n    echo \"  echo \\\"\\\" >> \\$nginxFilename\" >> $nginxConfScript\n    echo \"  echo \\\"      # Allow the use of websockets\\\" >> \\$nginxFilename\" >> $nginxConfScript\n    echo \"  echo \\\"      proxy_http_version 1.1;\\\" >> \\$nginxFilename\" >> $nginxConfScript\n    echo \"  echo \\\"      proxy_set_header Upgrade \\\\\\$http_upgrade;\\\" >> \\$nginxFilename\" >> $nginxConfScript\n    echo \"  echo \\\"      proxy_set_header Connection 'upgrade';\\\" >> \\$nginxFilename\" >> $nginxConfScript\n    echo \"  echo \\\"      proxy_set_header Host \\\\\\$host;\\\" >> \\$nginxFilename\" >> $nginxConfScript\n    echo \"  echo \\\"      proxy_cache_bypass \\\\\\$http_upgrade;\\\" >> \\$nginxFilename\" >> $nginxConfScript\n    echo \"  echo \\\"  }\\\" >> \\$nginxFilename\" >> $nginxConfScript\n    echo \"  echo \\\"}\\\" >> \\$nginxFilename\" >> $nginxConfScript\n    echo \"  ln -s \\$nginxFilename /etc/nginx/sites-enabled/\" >> $nginxConfScript\n    echo \"}\" >> $nginxConfScript\n\n    echo \"\" >> $nginxConfScript\n    echo \"#\" >> $nginxConfScript\n    echo \"# Create the following nginx config files\" >> $nginxConfScript\n    echo \"#\" >> $nginxConfScript\n    echo \"create_nginx_conf \"",
        {
         "Ref": "tutorseekersukdevnextstaticip"
        },
        "\" dev.cameronguy.biz\" >> $nginxConfScript\n    echo \"\" >> $nginxConfScript\n\n    logging \"Creating nginx conf file 4\"\n\n    chown ubuntu:ubuntu $nginxConfScript\n    chmod 755 $nginxConfScript\n\n}\n\n# \n# \n#\nupdate_bashrc_files() {\n\n    logging \"Setting root bashrc\"\n\n    touch ~/.bash_profile\n\n    export XDG_CONFIG_HOME=\"/home/ubuntu\"\n    export NVM_DIR=\"$([ -z \"${XDG_CONFIG_HOME-}\" ] && printf %s \"${HOME}/.nvm\" || printf %s \"${XDG_CONFIG_HOME}/nvm\")\"\n    [ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" # This loads nvm\n\n    echo \"export XDG_CONFIG_HOME=$XDG_CONFIG_HOME\" >> /root/.bashrc\n    echo \"export NVM_DIR=$NVM_DIR\" >> /root/.bashrc\n    echo \". $NVM_DIR/nvm.sh\" >> /root/.bashrc\n\n    logging \"Setting ubuntu bashrc\"\n    echo \"export XDG_CONFIG_HOME=$XDG_CONFIG_HOME\" >> /home/ubuntu/.bashrc\n    echo \"export NVM_DIR=$NVM_DIR\" >> /home/ubuntu/.bashrc\n    echo \". $NVM_DIR/nvm.sh\" >> /home/ubuntu/.bashrc\n\n    logging \"Completed updating root bashrc\"\n}\n\n# \n# \n#\ncreate_install_node_script() {\n\n    nodeScript=\"/home/ubuntu/scripts/install_node.sh\"\n    logging \"Create script to install node\"\n\n    echo \"#!/bin/bash\" > $nodeScript\n    logging \"Create script to install node 1\"\n    echo \"\" >> $nodeScript\n    echo \"logging() {\" >> $nodeScript\n    echo \"    echo \\`date \\\"+%F %T\\\"\\` - \\$1 >> /home/ubuntu/logs/install_node.txt\" >> $nodeScript\n    echo \"}\" >> $nodeScript\n    echo \"\" >> $nodeScript\n    logging \"Create script to install node 2\"\n    echo \"logging \\\"Starting node installation\\\"\" >> $nodeScript\n    echo \"curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash\" >>  $nodeScript\n    logging \"Create script to install node 3\"\n    echo \"\" >> $nodeScript\n    logging \"Create script to install node 4\"\n\n    echo \"chown ubuntu:ubuntu $NVM_DIR && chmod a+x $NVM_DIR\" >> $nodeScript\n    logging \"Create script to install node 5\"\n    echo \"logging \\\"Run nmv shell\\\"\" >> $nodeScript\n    echo \". $NVM_DIR/nvm.sh\" >> $nodeScript\n    logging \"Create script to install node 6\"\n    echo \"\" >> $nodeScript\n    logging \"Create script to install node 7\"\n\n    echo \"logging \\\"Installing node 18\\\"\" >> $nodeScript\n    echo \"nvm install 20\" >> $nodeScript\n    logging \"Create script to install node 8\"\n    echo \"\" >> $nodeScript\n    logging \"Create script to install node 9\"\n\n    echo \"logging \\\"Use node 20\\\"\" >> $nodeScript\n    echo \"nvm use 20\" >> $nodeScript\n    logging \"Create script to install node 20\"\n    echo \"\" >> $nodeScript\n\n    # echo \"logging \\\"Install yarn\\\"\" >> $nodeScript\n    # echo \"curl -o- -L https://yarnpkg.com/install.sh | bash\" >> $nodeScript\n    # logging \"Create script to install node 20\"\n    # echo \"export PATH=\\\"\\$HOME/.yarn/bin:\\$HOME/.config/yarn/global/node_modules/.bin:\\$PATH\\\"\" >> /root/.bashrc\n    # echo \"\" >> $nodeScript\n\n\n    echo \"logging \\\"Install PM2\\\"\" >> $nodeScript\n    echo \"npm i pm2 -g\" >> $nodeScript\n    echo \"\" >> $nodeScript\n\n    echo \"logging \\\"Install certbot\\\"\" >> $nodeScript\n    echo \"apt install certbot python3-certbot-nginx -y\" >>  $nodeScript\n    echo \"\" >> $nodeScript\n\n    echo \"hello\ngoodbye\" >> $nodeScript\n    echo \"\" >> $nodeScript\n    echo \"logging \\\"Restart nginx server\\\"\" >> $nodeScript\n    echo \"systemctl restart nginx >> /home/ubuntu/hello.txt 2>\\&1\" >> $nodeScript\n\n    chown ubuntu:ubuntu $nodeScript\n    chmod 755 $nodeScript\n\n\n    logging \"Completed node installation\"\n}\n\n#\ncreate_deploy_website_script() {\n\n    deployWebsite=\"/home/ubuntu/scripts/deploy_website.sh\"\n\n    logging \"Clone tutorseekers\"\n    echo \"#!/bin/bash\" > $deployWebsite\n    echo \"\" >> $deployWebsite\n    echo \"logging() {\" >> $deployWebsite\n    echo \"    echo \\`date \\\"+%F %T\\\"\\` - \\$1 >> /home/ubuntu/logs/deploy_website.txt\" >> $deployWebsite\n    echo \"}\" >> $deployWebsite\n    echo \"\" >> $deployWebsite\n    echo \"cd /home/ubuntu\" >> $deployWebsite\n    echo \"\" >> $deployWebsite\n\n    # Clone the repository\n    echo \"logging \\\"Clone tutorseekers\\\"\" >> $deployWebsite\n    # echo \"git clone https://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@github.com/ShareMyWebStuff/tutorseekers.co.uk.git tutorseekers_tmp\" >> $deployWebsite\n    echo \"git clone https://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@github.com/ShareMyWebStuff/tutorseekers-mono.git tutorseekers_tmp\" >> $deployWebsite\n# https://github.com/ShareMyWebStuff/tutorseekers-mono.git\n# Fine grain token - https://github.com/settings/personal-access-tokens/973258\n# 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\n\n    # Change in to the directory\n    echo \"cd tutorseekers_tmp/\" >> $deployWebsite\n    echo \"\" >> $deployWebsite\n\n    # Install the node modules\n    echo \"logging \\\"Run npm install\\\"\" >> $deployWebsite\n    echo \"npm install\" >> $deployWebsite\n    echo \"\" >> $deployWebsite\n\n    # Build the project\n    echo \"logging \\\"Run npm build\\\"\" >> $deployWebsite\n    echo \"npm run build\" >> $deployWebsite\n    echo \"\" >> $deployWebsite\n\n    # Change in to the home directory\n    echo \"cd /home/ubuntu\" >> $deployWebsite\n    echo \"\" >> $deployWebsite\n\n    # Remove the existing project\n    echo \"logging \\\"Remove tutorseekers\\\"\" >> $deployWebsite\n    echo \"rm -rf tutorseekers/\" >> $deployWebsite\n    echo \"\" >> $deployWebsite\n\n    # Rename the tmp directory to the project directory\n    echo \"logging \\\"Rename tutorseekers_tmp\\\"\" >> $deployWebsite\n    echo \"mv tutorseekers_tmp tutorseekers\" >> $deployWebsite\n    echo \"\" >> $deployWebsite\n\n    # Change in to the directory\n    echo \"cd tutorseekers/\" >> $deployWebsite\n    echo \"\" >> $deployWebsite\n\n    # Restart pm2\n    echo \"pm2 delete all\" >> $deployWebsite\n    echo \"pm2 startup >> /home/ubuntu/logs/deploy_website.txt\" >> $deployWebsite\n    echo \"pm2 start npm --name tutorseekers-dev -- start &>/dev/null\" >> $deployWebsite\n    echo \"pm2 save\" >> $deployWebsite\n\n\n    # echo \"logging \\\"Remove tutorseekers\\\"\" >> $deployWebsite\n    # echo \"rm -rf tutorseekers/\" >> $deployWebsite\n    # echo \"\" >> $deployWebsite\n    # echo \"logging \\\"Clone tutorseekers\\\"\" >> $deployWebsite\n    # echo \"git clone https://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@github.com/ShareMyWebStuff/tutorseekers.co.uk.git tutorseekers\" >> $deployWebsite\n    # echo \"\" >> $deployWebsite\n    # echo \"cd tutorseekers/\" >> $deployWebsite\n    # echo \"\" >> $deployWebsite\n    # echo \"logging \\\"Run npm install\\\"\" >> $deployWebsite\n    # echo \"npm install\" >> $deployWebsite\n    # echo \"\" >> $deployWebsite\n    # echo \"logging \\\"Run npm build\\\"\" >> $deployWebsite\n    # echo \"npm run build\" >> $deployWebsite\n    # echo \"\" >> $deployWebsite\n    # echo \"logging \\\"Run PM2 start\\\"\" >> $deployWebsite\n    # echo \"pm2 startup >> /home/ubuntu/logs/deploy_website.txt\" >> $deployWebsite\n    # echo \"pm2 start npm --name tutorseekers-dev -- start &>/dev/null\" >> $deployWebsite\n    # echo \"pm2 save\" >> $deployWebsite\n    # # # echo \"nohup pm2 start npm --name tutorseekers-dev &>/dev/null &\" >> $deployWebsite\n    # # # echo \"nohup pm2 start npm --name tutorseekers-dev -- start &>/dev/null &\" >> $deployWebsite\n    # # echo \"sleep 1\" >> $deployWebsite\n    # # echo \"pm2 status >> /home/ubuntu/logs/deploy_website.txt\" >> $deployWebsite\n    # echo \"\" >> $deployWebsite\n    echo \"logging \\\"Completed\\\"\" >> $deployWebsite\n\n    chown ubuntu:ubuntu $deployWebsite\n    chmod 755 $deployWebsite\n}\n\ncreate_scripts_directory\n\ncreate_script_to_upgrade_server\n\ncreate_nginx_conf_file\n\nupdate_bashrc_files\n\ncreate_install_node_script\n\ncreate_deploy_website_script\n\n# . /home/ubuntu/scripts/upgrade_server.sh\n\n# . /home/ubuntu/scripts/create_nginx_conf.sh\n\n# . /home/ubuntu/scripts/install_node.sh\n\n# . /home/ubuntu/scripts/deploy_website.sh\n"
       ]
      ]
     }
    }
   },
   "DependsOn": [
    "tutorseekersukdevnextec2roleDefaultPolicy544A0A71",
    "tutorseekersukdevnextec2roleC0B79471"
   ],
   "Metadata": {
    "aws:cdk:path": "tutorseekers-uk-dev-frontend-deploy/tutorseekers-uk-dev-next-ec2-instance/Resource"
   }
  },
  "tutorseekersnextstaticipassociation": {
   "Type": "AWS::EC2::EIPAssociation",
   "Properties": {
    "EIP": {
     "Ref": "tutorseekersukdevnextstaticip"
    },
    "InstanceId": {
     "Ref": "tutorseekersukdevnextec2instanceDB23062D"
    }
   },
   "Metadata": {
    "aws:cdk:path": "tutorseekers-uk-dev-frontend-deploy/tutorseekers-next-static-ip-association"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/02NQQqDMBBFz+I+TqOlByjShTuxByhpHGE0ZsCJlRJy91JtaVf/f96HV0JxPIHOzCq57cbc0R3iNRg7qhaFl9miMqvcIpkJYssOVdX7LRt2ZJ/v+Wu1l2C8xWbmnhwmhbaEWPX+UjfqC/+PamdnEbZkArFPaTN85El57hAGOTxKDYUGnQ1ClM+LDzQhtHu+AO2lHP7HAAAA"
   },
   "Metadata": {
    "aws:cdk:path": "tutorseekers-uk-dev-frontend-deploy/CDKMetadata/Default"
   }
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}