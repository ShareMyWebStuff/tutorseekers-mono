{"version":3,"file":"get-certificate-regions.js","sourceRoot":"/","sources":["src/get-certificate-regions.ts"],"names":[],"mappings":";;;AAAA,qCAA2D;AAYpD,MAAM,qBAAqB,GAAG,GAAG,EAAE;IACxC,IAAI,QAAQ,GAAmB,EAAE,CAAC;IAElC,MAAM,CAAC,MAAM,CAAC,sBAAa,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;QAC/C,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YACpC,eAAe;YACf,IACE,QAAQ,CAAC,SAAS,KAAK,SAAS;gBAChC,CAAC,CAAC,QAAQ,CAAC,YAAY;gBACvB,CAAC,CAAC,QAAQ,CAAC,MAAM,EACjB,CAAC;gBACD,IAAI,gBAAO,CAAC,QAAQ,CAAC,YAAY,CAAC,KAAK,SAAS,EAAE,CAAC;oBACjD,OAAO,CAAC,GAAG,CACT,gBAAgB,QAAQ,CAAC,YAAY,+BAA+B,CACrE,CAAC;oBACF,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAClB,CAAC;gBACD,MAAM,UAAU,GAAG,gBAAO,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,UAAU,CAAC;gBAC7D,MAAM,GAAG,GAAG,gBAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;gBAErC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;oBAC1B,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBAC/B,CAAC;qBAAM,CAAC;oBACN,MAAM,eAAe,GAAG,QAAQ,CAAC,UAAU,CAAC,CAAC,IAAI,CAC/C,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,MAAM,KAAK,GAAG,CAAC,MAAM,CACzC,CAAC;oBACF,IAAI,CAAC,eAAe,EAAE,CAAC;wBACrB,QAAQ,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBACjC,CAAC;gBACH,CAAC;YACH,CAAC;YAED,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;gBACnC,cAAc;gBACd,IACE,OAAO,CAAC,SAAS,KAAK,SAAS;oBAC/B,CAAC,CAAC,OAAO,CAAC,YAAY;oBACtB,CAAC,CAAC,OAAO,CAAC,MAAM,EAChB,CAAC;oBACD,IAAI,gBAAO,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,SAAS,EAAE,CAAC;wBAChD,OAAO,CAAC,GAAG,CACT,gBAAgB,OAAO,CAAC,YAAY,+BAA+B,CACpE,CAAC;wBACF,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBAClB,CAAC;oBACD,MAAM,UAAU,GAAG,gBAAO,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,UAAU,CAAC;oBAC5D,MAAM,GAAG,GAAG,gBAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;oBAEpC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;wBAC1B,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;oBAC/B,CAAC;yBAAM,CAAC;wBACN,MAAM,eAAe,GAAG,QAAQ,CAAC,UAAU,CAAC,CAAC,IAAI,CAC/C,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,MAAM,KAAK,GAAG,CAAC,MAAM,CACzC,CAAC;wBACF,IAAI,CAAC,eAAe,EAAE,CAAC;4BACrB,QAAQ,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACjC,CAAC;oBACH,CAAC;gBACH,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,OAAO,QAAQ,CAAC;AAClB,CAAC,CAAC;AAhEW,QAAA,qBAAqB,yBAgEhC","sourcesContent":["import { DOMAINS, REGIONS, WEBSITE_SETUP } from \"./config\";\r\n\r\n/**\r\n * get the regions each domain name will require a certificate in\r\n */\r\ntype T_CERT_REGIONS = {\r\n  [key: string]: {\r\n    region: string;\r\n    awsRegion: string;\r\n  }[];\r\n};\r\n\r\nexport const getCertificateRegions = () => {\r\n  let certRegs: T_CERT_REGIONS = {};\r\n\r\n  Object.values(WEBSITE_SETUP).forEach((website) => {\r\n    website.frontend.forEach((frontend) => {\r\n      // Add frontend\r\n      if (\r\n        frontend.subDomain !== undefined &&\r\n        !!frontend.domainNameId &&\r\n        !!frontend.region\r\n      ) {\r\n        if (DOMAINS[frontend.domainNameId] === undefined) {\r\n          console.log(\r\n            `Domain item (${frontend.domainNameId}) is not declared in DOMAINS.`,\r\n          );\r\n          process.exit(0);\r\n        }\r\n        const domainName = DOMAINS[frontend.domainNameId].domainName;\r\n        const reg = REGIONS[frontend.region];\r\n\r\n        if (!certRegs[domainName]) {\r\n          certRegs[domainName] = [reg];\r\n        } else {\r\n          const awsRegionExists = certRegs[domainName].find(\r\n            (region) => region.region === reg.region,\r\n          );\r\n          if (!awsRegionExists) {\r\n            certRegs[domainName].push(reg);\r\n          }\r\n        }\r\n      }\r\n\r\n      frontend.backend.forEach((backend) => {\r\n        // Add backend\r\n        if (\r\n          backend.subDomain !== undefined &&\r\n          !!backend.domainNameId &&\r\n          !!backend.region\r\n        ) {\r\n          if (DOMAINS[backend.domainNameId] === undefined) {\r\n            console.log(\r\n              `Domain item (${backend.domainNameId}) is not declared in DOMAINS.`,\r\n            );\r\n            process.exit(0);\r\n          }\r\n          const domainName = DOMAINS[backend.domainNameId].domainName;\r\n          const reg = REGIONS[backend.region];\r\n\r\n          if (!certRegs[domainName]) {\r\n            certRegs[domainName] = [reg];\r\n          } else {\r\n            const awsRegionExists = certRegs[domainName].find(\r\n              (region) => region.region === reg.region,\r\n            );\r\n            if (!awsRegionExists) {\r\n              certRegs[domainName].push(reg);\r\n            }\r\n          }\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  return certRegs;\r\n};\r\n"]}